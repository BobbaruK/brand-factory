---
import { type CustomOptions } from "@/pages/index.astro";
import MainLogo from "../../../../globals/components/logos/MainLogo.astro";
import { showcase } from "../../../../globals/features/showcase/text";
import { type ComponentProps } from "../../../../globals/types/component-props";
import { Features } from "../../../../globals/types/enums";
import type { TranslationsType } from "../../../../globals/types/translations";
import bg from "../assets/bg.jpg";
import { Navigation } from "./Navigation";
import { Button, buttonVariants } from "./ui/button";

interface Props {
  componentProps: ComponentProps<any, CustomOptions>;
}
const { componentProps } = Astro.props;

const bgPath = `url('${bg.src}')`;

const ctaMenuButton: TranslationsType = {
  en: "Start now",
  it: "",
  tr: "",
  ro: "",
  ar: "",
  de: "",
  es: ``,
  sv: ``,
  pt: "",
  fi: "",
  pl: ``,
  hu: "",
  th: "",
  ms: "",
  vi: "",
};

const title: TranslationsType = {
  en: "We monitor, you trade!",
  it: "",
  tr: "",
  ro: "",
  ar: "",
  de: "",
  es: ``,
  sv: ``,
  pt: "",
  fi: "",
  pl: ``,
  hu: "",
  th: "",
  ms: "",
  vi: "",
};

const paraLead: TranslationsType = {
  en: "Discover how easy it is to do profitable trades, With our professional signals and strategies.",
  it: "",
  tr: "",
  ro: "",
  ar: "",
  de: "",
  es: ``,
  sv: ``,
  pt: "",
  fi: "",
  pl: ``,
  hu: "",
  th: "",
  ms: "",
  vi: "",
};

const buttons: (
  | {
      label: TranslationsType;
      type: "Modal";
    }
  | {
      label: TranslationsType;
      type: "Href";
      href: string;
    }
)[] = [
  {
    label: {
      en: "Claim your free signals kit",
      it: "",
      tr: "",
      ro: "",
      ar: "",
      de: "",
      es: ``,
      sv: ``,
      pt: "",
      fi: "",
      pl: ``,
      hu: "",
      th: "",
      ms: "",
      vi: "",
    },
    type: "Modal",
  },
  {
    label: {
      en: "Request a callback",
      it: "",
      tr: "",
      ro: "",
      ar: "",
      de: "",
      es: ``,
      sv: ``,
      pt: "",
      fi: "",
      pl: ``,
      hu: "",
      th: "",
      ms: "",
      vi: "",
    },
    type: "Href",
    href: "#section7",
  },
];

const navItems: {
  label: TranslationsType;
  href: string;
}[] = [
  {
    label: {
      en: "Home",
      it: "",
      tr: "",
      ro: "",
      ar: "",
      de: "",
      es: ``,
      sv: ``,
      pt: "",
      fi: "",
      pl: ``,
      hu: "",
      th: "",
      ms: "",
      vi: "",
    },
    href: "#section1",
  },
  {
    label: {
      en: "Oracle Signals",
      it: "",
      tr: "",
      ro: "",
      ar: "",
      de: "",
      es: ``,
      sv: ``,
      pt: "",
      fi: "",
      pl: ``,
      hu: "",
      th: "",
      ms: "",
      vi: "",
    },
    href: "#section2",
  },
  {
    label: {
      en: "Contact us",
      it: "",
      tr: "",
      ro: "",
      ar: "",
      de: "",
      es: ``,
      sv: ``,
      pt: "",
      fi: "",
      pl: ``,
      hu: "",
      th: "",
      ms: "",
      vi: "",
    },
    href: "#section7",
  },
];
---

<header id="header" class="text-background">
  <div
    class="container flex items-center justify-between gap-4 py-4 lg:py-6 2xl:py-8"
  >
    <MainLogo
      size={componentProps.brandObj.nameToLower}
      logo={componentProps.logo()}
      square={componentProps.customOptions?.logoSquare}
    />
    <div class="flex items-center gap-8">
      <Navigation
        navItems={navItems.map((item) => ({
          label: componentProps.features?.includes(Features.showcase)
            ? showcase({ words: 2 })
            : item.label[componentProps.lang],
          href: item.href,
        }))}
        client:load
      />
      <Button
        variant={"secondary"}
        set:html={componentProps.features?.includes(Features.showcase)
          ? showcase({ words: 1 })
          : ctaMenuButton[componentProps.lang]}
        className="font-rubik js-modal-trigger hidden cursor-pointer rounded-3xl text-xs font-medium md:block"
      />
    </div>
  </div>
  <div class="container space-y-6 pt-[min(140px,_10%)] pb-[min(190px,_10%)]">
    <h1
      class="text-heading1 font-rubik font-black text-balance uppercase"
      set:html={componentProps.features?.includes(Features.showcase)
        ? showcase({ words: 5 })
        : title[componentProps.lang]}
    />
    <p
      class="text-para-lead font-rubik max-w-[40ch]"
      set:html={componentProps.features?.includes(Features.showcase)
        ? showcase({ words: 15 })
        : paraLead[componentProps.lang]}
    />
    <div
      class="font-rubik flex w-full max-w-[730px] flex-wrap items-center gap-4 font-medium"
    >
      {
        buttons.map((button) => {
          if (button.type === "Modal")
            return (
              <Button
                set:html={
                  componentProps.features?.includes(Features.showcase)
                    ? showcase({ words: 3 })
                    : button.label[componentProps.lang]
                }
                className="js-modal-trigger h-auto min-h-[50px]  rounded-3xl  border-2 border-transparent hover:bg-transparent hover:border-white cursor-pointer grow text-[16px]!"
              />
            );

          if (button.type === "Href")
            return (
              <Button asChild>
                <a
                  href={button.href}
                  class={`${buttonVariants({ variant: "secondary" })} h-auto! min-h-[50px]! grow cursor-pointer rounded-3xl! border-2 border-transparent bg-white text-[16px]! text-black! hover:border-white hover:bg-transparent hover:text-white!`}
                  set:html={
                    componentProps.features?.includes(Features.showcase)
                      ? showcase({ words: 3 })
                      : button.label[componentProps.lang]
                  }
                />
              </Button>
            );
        })
      }
    </div>
  </div>
</header>

<style lang="scss" define:vars={{ bgPath }}>
  #header {
    background-image: var(--bgPath);
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    background-attachment: fixed;
  }
</style>
